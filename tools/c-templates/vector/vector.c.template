#include "${header_name}"

#include <assert.h>
#include <stdlib.h>

static const unsigned INITIAL_CAPACITY = 32;

${vector_type} *
${namespace_prefix}_create ()
{
    ${namespace_prefix}_create_with_capacity(INITIAL_CAPACITY);
}

${vector_type} *
${namespace_prefix}_create_with_capacity (unsigned num_elems)
{
    num_elems = num_elems > 0 ? num_elems : INITIAL_CAPACITY;
    ${vector_type} *vec = (${vector_type} *) malloc (sizeof(${vector_type}));
    vec->store = (${element_type} *) malloc (num_elems * sizeof(${element_type}));
    vec->capacity = num_elems;
    vec->num_elems = 0;
    ${namespace_prefix}_check_invariants (vec);
    return vec;
}

void
${namespace_prefix}_destroy (${vector_type} *vec)
{
    if (vec == NULL) return;

    ${namespace_prefix}_check_invariants (vec);
    free (vec->store);
    free (vec);
}

unsigned
${namespace_prefix}_get_num_elems (${vector_type} *vec)
{
    ${namespace_prefix}_check_invariants (vec);
    return vec->num_elems;
}

unsigned
${namespace_prefix}_get_max_num_elems (${vector_type} *vec)
{
    ${namespace_prefix}_check_invariants (vec);
    return vec->capacity;
}

static void
double_vector_size (${vector_type} *vec)
{
    ${namespace_prefix}_check_invariants (vec);
    unsigned new_capacity = vec->capacity * 2;
    vec->store = (${element_type} *) realloc (vec->store,
                                     new_capacity * sizeof(${element_type}));
    vec->capacity = new_capacity;
    ${namespace_prefix}_check_invariants (vec);
}

void
${namespace_prefix}_push_back (${vector_type} *vec, ${element_type} node)
{
    ${namespace_prefix}_check_invariants (vec);
    if (vec->num_elems == vec->capacity)
        double_vector_size (vec);
    vec->num_elems += 1;
    ${namespace_prefix}_set (vec, vec->num_elems, node);
    ${namespace_prefix}_check_invariants (vec);
}
