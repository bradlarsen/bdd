/* THIS FILE WAS GENERATED FROM A TEMPLATE FILE.  MAKE MODIFICATIONS
TO THE TEMPLATE INSTEAD. */

#ifndef ${include_guard_name}
#define ${include_guard_name}

${local_includes}

#include <assert.h>
#include <stdlib.h>

typedef struct
{
    /* memory for elements */
    ${element_type} *store;
    /* total number of allocated elements */
    unsigned capacity;
    /* number of used elements, i.e., index of first free element */
    unsigned num_elems;
} ${vector_type};
/* Invariants:
 *     capacity > 0
 *     capacity >= num_elems
 *     store != NULL
 */

/* Creates and returns a new ${vector_type}. */
extern void
${prefix}_create (${vector_type} *vec);

/* Creates and returns a new ${vector_type} with the given maximum
 * number of elements. */
extern void
${prefix}_create_with_capacity (${vector_type} *vec, unsigned num_elems);

/* Frees the memory used by the given ${vector_type}.  It is an error
 * to call this procedure more than once on a ${vector_type}. */
extern void
${prefix}_destroy (${vector_type} *vec);

/* Gets the number of used elements in the vector. */
static inline unsigned
${prefix}_get_num_elems (${vector_type} *vec)
{
    return vec->num_elems;
}

/* Gets the capacity of the vector, i.e., the number of elements for
   which it has allocated space. */
static inline unsigned
${prefix}_get_capacity (${vector_type} *vec)
{
    return vec->capacity;
}

/* Gets the element at the specified index.  The index must be less
 * than the number of used elements of the vector. */
static inline ${element_type}
${prefix}_get (${vector_type} *vec, unsigned idx)
{
    assert (idx < vec->num_elems);
    return vec->store[idx];
}

/* Sets the element at the specified index to the given value.  The
 * index must be less than the number of used elements of the
 * vector. */
static inline void
${prefix}_set (${vector_type} *vec, unsigned idx, ${element_type} val)
{
    assert (idx < vec->num_elems);
    vec->store[idx] = val;
}

/* Appends the given ${element_type} to the vector, doubling the size of the
   vector if it is not large enough. */
static inline void
${prefix}_push_back (${vector_type} *vec, ${element_type} val)
{
    extern void double_vector_size (${vector_type} *vec);
    if (vec->num_elems == vec->capacity)
        double_vector_size (vec);
    vec->num_elems += 1;
    ${prefix}_set (vec, vec->num_elems - 1, val);
}

#endif /* ${include_guard_name} */
